(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{440:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("p",[t._v("JavaScript 中的值都具有特定的类型。例如，字符串或数字。")]),t._v(" "),a("p",[t._v("在 JavaScript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。在这里，我们将对它们进行大体的介绍，在下一章中，我们将详细讨论它们。")]),t._v(" "),a("p",[t._v("我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmessage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("允许这种操作的编程语言，例如 JavaScript，被称为“动态类型”（dynamically typed）的编程语言，意思是虽然编程语言中有不同的数据类型，但是你定义的变量并不会在定义后，被限制为某一数据类型。")]),t._v(" "),a("h2",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" Number 类型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("em",[t._v("number")]),t._v(" 类型代表整数和浮点数。")]),t._v(" "),a("p",[t._v("数字可以有很多操作，比如，乘法 "),a("code",[t._v("*")]),t._v("、除法 "),a("code",[t._v("/")]),t._v("、加法 "),a("code",[t._v("+")]),t._v("、减法 "),a("code",[t._v("-")]),t._v(" 等等。")]),t._v(" "),a("p",[t._v("除了常规的数字，还包括所谓的“特殊数值（special numeric values）”也属于这种类型："),a("code",[t._v("Infinity")]),t._v("、"),a("code",[t._v("-Infinity")]),t._v(" 和 "),a("code",[t._v("NaN")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Infinity")]),t._v(" 代表数学概念中的 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Infinity",target:"_blank",rel:"noopener noreferrer"}},[t._v("无穷大"),a("OutboundLink")],1),t._v(" ∞。是一个比任何数字都大的特殊值。")]),t._v(" "),a("p",[t._v("我们可以通过除以 0 来得到它：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])])]),a("p",[t._v("或者在代码中直接使用它：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("NaN")]),t._v(" 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not a number"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN，这样的除法是错误的")]),t._v("\n")])])]),a("p",[a("code",[t._v("NaN")]),t._v(" 是粘性的。任何对 "),a("code",[t._v("NaN")]),t._v(" 的进一步操作都会返回 "),a("code",[t._v("NaN")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"not a number"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("p",[t._v("所以，如果在数学表达式中有一个 "),a("code",[t._v("NaN")]),t._v("，会被传播到最终结果。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("数学运算是安全的")]),t._v(" "),a("p",[t._v("在 JavaScript 中做数学运算是安全的。我们可以做任何事：除以 0，将非数字字符串视为数字，等等。")]),t._v(" "),a("p",[t._v("脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 "),a("code",[t._v("NaN")]),t._v(" 的结果。")])]),t._v(" "),a("p",[t._v('特殊的数值属于 "number" 类型。当然，对“特殊的数值”这个词的一般认识是，它们并不是数字。')]),t._v(" "),a("p",[t._v("我们将在 "),a("a",{attrs:{href:"/number"}},[t._v("数字类型")]),t._v(" 一节中学习数字的更多细节。")]),t._v(" "),a("h2",{attrs:{id:"bigint-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint-类型"}},[t._v("#")]),t._v(" BigInt 类型")]),t._v(" "),a("p",[t._v('在 JavaScript 中，"number" 类型无法表示大于 '),a("code",[t._v("(2"),a("sup",[t._v("53")]),t._v("-1)")]),t._v("（即 "),a("code",[t._v("9007199254740991")]),t._v("），或小于 "),a("code",[t._v("-(2"),a("sup",[t._v("53")]),t._v("-1)")]),t._v(" 的整数。这是其内部表示形式导致的技术限制。")]),t._v(" "),a("p",[t._v("在大多数情况下，这个范围就足够了，但有时我们需要很大的数字，例如用于加密或微秒精度的时间戳。")]),t._v(" "),a("p",[a("code",[t._v("BigInt")]),t._v(" 类型是最近被添加到 JavaScript 语言中的，用于表示任意长度的整数。")]),t._v(" "),a("p",[t._v("可以通过将 "),a("code",[t._v("n")]),t._v(" 附加到整数字段的末尾来创建 "),a("code",[t._v("BigInt")]),t._v(" 值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 尾部的 "n" 表示这是一个 BigInt 类型')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bigInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234567890123456789012345678901234567890n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("由于很少需要 "),a("code",[t._v("BigInt")]),t._v(" 类型的数字，我们在这没有对其进行讲解，我们在单独的章节 "),a("a",{attrs:{href:"/bigint"}},[t._v("bigint")]),t._v(" 中专门对其进行了介绍。当你需要使用那样的大数字的时候，可以去阅读该章节。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("兼容性问题")]),t._v(" "),a("p",[t._v("目前 Firefox/Chrome/Edge/Safari 已经支持 "),a("code",[t._v("BigInt")]),t._v(" 了，但 IE 还没有。")])]),t._v(" "),a("p",[t._v("你可以查看 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#Browser_compatibility",target:"_blank",rel:"noopener noreferrer"}},[a("em",[t._v("MDN")]),t._v(" BigInt 兼容性表"),a("OutboundLink")],1),t._v(" 以了解哪些版本的浏览器已经支持 BigInt 了。")]),t._v(" "),a("h2",{attrs:{id:"string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" String 类型")]),t._v(" "),a("p",[t._v("JavaScript 中的字符串必须被括在引号里。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Single quotes are ok too'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" phrase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("can embed another ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在 JavaScript 中，有三种包含字符串的方式。")]),t._v(" "),a("ol",[a("li",[t._v("双引号："),a("code",[t._v('"Hello"')]),t._v(".")]),t._v(" "),a("li",[t._v("单引号："),a("code",[t._v("'Hello'")]),t._v(".")]),t._v(" "),a("li",[t._v("反引号："),a("code",[t._v("`Hello`")]),t._v(".")])]),t._v(" "),a("p",[t._v("双引号和单引号都是“简单”引用，在 JavaScript 中两者几乎没有什么差别。")]),t._v(" "),a("p",[t._v("反引号是 "),a("strong",[t._v("功能扩展")]),t._v(" 引号。它们允许我们通过将变量和表达式包装在 "),a("code",[t._v("${…}")]),t._v(" 中，来将它们嵌入到字符串中。例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嵌入一个变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("Hello, ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hello, John!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 嵌入一个表达式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("the result is ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is 3")]),t._v("\n")])])]),a("p",[a("code",[t._v("${…}")]),t._v(" 内的表达式会被计算，计算结果会成为字符串的一部分。可以在 "),a("code",[t._v("${…}")]),t._v(" 内放置任何东西：诸如名为 "),a("code",[t._v("name")]),t._v(" 的变量，或者诸如 "),a("code",[t._v("1 + 2")]),t._v(" 的算数表达式，或者其他一些更复杂的。")]),t._v(" "),a("p",[t._v("需要注意的是，这仅仅在反引号内有效，其他引号不允许这种嵌入。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result is ${1 + 2}（使用双引号则不会计算 ${…} 中的内容）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"the result is ${1 + 2}"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们会在 "),a("a",{attrs:{href:"/string"}},[t._v("字符串")]),t._v(" 一节中学习字符串的更多细节。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("JavaScript 中没有 character 类型。")]),t._v(" "),a("p",[t._v('在一些语言中，单个字符有一个特殊的 "character" 类型，在 C 语言和 Java 语言中被称为 "char"。')]),t._v(" "),a("p",[t._v("在 JavaScript 中没有这种类型。只有一种 "),a("code",[t._v("string")]),t._v(" 类型，一个字符串可以包含零个（为空）、一个或多个字符。")])]),t._v(" "),a("h2",{attrs:{id:"boolean-类型-逻辑类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型-逻辑类型"}},[t._v("#")]),t._v(" Boolean 类型（逻辑类型）")]),t._v(" "),a("p",[t._v("boolean 类型仅包含两个值："),a("code",[t._v("true")]),t._v(" 和 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[t._v("这种类型通常用于存储表示 yes 或 no 的值："),a("code",[t._v("true")]),t._v(" 意味着 “yes，正确”，"),a("code",[t._v("false")]),t._v(" 意味着 “no，不正确”。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nameFieldChecked "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// yes, name field is checked")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ageFieldChecked "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no, age field is not checked")]),t._v("\n")])])]),a("p",[t._v("布尔值也可作为比较的结果：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isGreater "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" isGreater "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// true（比较的结果是 "yes"）')]),t._v("\n")])])]),a("p",[t._v("更详细的内容将会在 "),a("a",{attrs:{href:"/logical-operators"}},[t._v("逻辑运算符")]),t._v(" 一节中介绍。")]),t._v(" "),a("h2",{attrs:{id:"null-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-值"}},[t._v("#")]),t._v(' "null" 值')]),t._v(" "),a("p",[t._v("特殊的 "),a("code",[t._v("null")]),t._v(" 值不属于上述任何一种类型。")]),t._v(" "),a("p",[t._v("它构成了一个独立的类型，只包含 "),a("code",[t._v("null")]),t._v(" 值：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("相比较于其他编程语言，JavaScript 中的 "),a("code",[t._v("null")]),t._v(" 不是一个“对不存在的 "),a("code",[t._v("object")]),t._v(" 的引用”或者 “null 指针”。")]),t._v(" "),a("p",[t._v("JavaScript 中的 "),a("code",[t._v("null")]),t._v(" 仅仅是一个代表“无”、“空”或“值未知”的特殊值。")]),t._v(" "),a("p",[t._v("上面的代码表示 "),a("code",[t._v("age")]),t._v(" 是未知的。")]),t._v(" "),a("h2",{attrs:{id:"undefined-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-值"}},[t._v("#")]),t._v(' "undefined" 值')]),t._v(" "),a("p",[t._v("特殊值 "),a("code",[t._v("undefined")]),t._v(" 和 "),a("code",[t._v("null")]),t._v(" 一样自成类型。")]),t._v(" "),a("p",[a("code",[t._v("undefined")]),t._v(" 的含义是 "),a("code",[t._v("未被赋值")]),t._v("。")]),t._v(" "),a("p",[t._v("如果一个变量已被声明，但未被赋值，那么它的值就是 "),a("code",[t._v("undefined")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 弹出 "undefined"')]),t._v("\n")])])]),a("p",[t._v("从技术上讲，可以显式地将 "),a("code",[t._v("undefined")]),t._v(" 赋值给变量：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将值修改为 undefined")]),t._v("\nage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n")])])]),a("p",[t._v("……但是不建议这样做。通常，使用 "),a("code",[t._v("null")]),t._v(" 将一个“空”或者“未知”的值写入变量中，而 "),a("code",[t._v("undefined")]),t._v(" 则保留作为未进行初始化的事物的默认初始值。")]),t._v(" "),a("h2",{attrs:{id:"object-类型和-symbol-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-类型和-symbol-类型"}},[t._v("#")]),t._v(" object 类型和 symbol 类型")]),t._v(" "),a("p",[a("code",[t._v("object")]),t._v(" 类型是一个特殊的类型。")]),t._v(" "),a("p",[t._v("其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。相反，"),a("code",[t._v("object")]),t._v(" 则用于储存数据集合和更复杂的实体。")]),t._v(" "),a("p",[t._v("因为它非常重要，所以我们对其进行单独讲解。在充分学习了原始类型后，我们将会在 "),a("a",{attrs:{href:"/object"}},[t._v("对象")]),t._v(" 一章中介绍 "),a("code",[t._v("object")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("symbol")]),t._v(" 类型用于创建对象的唯一标识符。我们在这里提到 "),a("code",[t._v("symbol")]),t._v(" 类型是为了完整性，但我们要在学完 "),a("code",[t._v("object")]),t._v(" 类型后再学习它。")]),t._v(" "),a("h2",{attrs:{id:"typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符"}},[t._v("#")]),t._v(" typeof 运算符")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 运算符返回参数的类型。当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。")]),t._v(" "),a("p",[t._v("它支持两种语法形式：")]),t._v(" "),a("ol",[a("li",[t._v("作为运算符："),a("code",[t._v("typeof x")]),t._v("。")]),t._v(" "),a("li",[t._v("函数形式："),a("code",[t._v("typeof(x)")]),t._v("。")])]),t._v(" "),a("p",[t._v("换言之，有括号和没有括号，得到的结果是一样的。")]),t._v(" "),a("p",[t._v("对 "),a("code",[t._v("typeof x")]),t._v(" 的调用会以字符串的形式返回数据类型：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "bigint"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "boolean"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "symbol"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" Math "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (1)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "object"  (2)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" alert "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "function"  (3)')]),t._v("\n")])])]),a("p",[t._v("最后三行可能需要额外的说明：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Math")]),t._v(" 是一个提供数学运算的内建 "),a("code",[t._v("object")]),t._v("。我们会在 "),a("a",{attrs:{href:"/number"}},[t._v("数字类型")]),t._v(" 一节中学习它。此处仅作为一个 "),a("code",[t._v("object")]),t._v(" 的示例。")]),t._v(" "),a("li",[a("code",[t._v("typeof null")]),t._v(" 的结果是 "),a("code",[t._v('"object"')]),t._v("。这是官方承认的 "),a("code",[t._v("typeof")]),t._v(" 的行为上的错误，这个问题来自于 JavaScript 语言的早期，并为了兼容性而保留了下来。"),a("code",[t._v("null")]),t._v(" 绝对不是一个 "),a("code",[t._v("object")]),t._v("。"),a("code",[t._v("null")]),t._v(" 有自己的类型，它是一个特殊值。")]),t._v(" "),a("li",[a("code",[t._v("typeof alert")]),t._v(" 的结果是 "),a("code",[t._v('"function"')]),t._v("，因为 "),a("code",[t._v("alert")]),t._v(' 在 JavaScript 语言中是一个函数。我们会在下一章学习函数，那时我们会了解到，在 JavaScript 语言中没有一个特别的 "function" 类型。函数隶属于 '),a("code",[t._v("object")]),t._v(" 类型。但是 "),a("code",[t._v("typeof")]),t._v(" 会对函数区分对待，并返回 "),a("code",[t._v('"function"')]),t._v("。这也是来自于 JavaScript 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便。")])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("JavaScript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 "),a("code",[t._v("object")]),t._v(" 为复杂数据类型）。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("number")]),t._v(" 用于任何类型的数字：整数或浮点数，在 "),a("code",[t._v("±(2"),a("sup",[t._v("53")]),t._v("-1)")]),t._v(" 范围内的整数。")]),t._v(" "),a("li",[a("code",[t._v("bigint")]),t._v(" 用于任意长度的整数。")]),t._v(" "),a("li",[a("code",[t._v("string")]),t._v(" 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。")]),t._v(" "),a("li",[a("code",[t._v("boolean")]),t._v(" 用于 "),a("code",[t._v("true")]),t._v(" 和 "),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v(" 用于未知的值 —— 只有一个 "),a("code",[t._v("null")]),t._v(" 值的独立类型。")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" 用于未定义的值 —— 只有一个 "),a("code",[t._v("undefined")]),t._v(" 值的独立类型。")]),t._v(" "),a("li",[a("code",[t._v("symbol")]),t._v(" 用于唯一的标识符。")]),t._v(" "),a("li",[a("code",[t._v("object")]),t._v(" 用于更复杂的数据结构。")])]),t._v(" "),a("p",[t._v("我们可以通过 "),a("code",[t._v("typeof")]),t._v(" 运算符查看存储在变量中的数据类型。")]),t._v(" "),a("ul",[a("li",[t._v("两种形式："),a("code",[t._v("typeof x")]),t._v(" 或者 "),a("code",[t._v("typeof(x)")]),t._v("。")]),t._v(" "),a("li",[t._v("以字符串的形式返回类型名称，例如 "),a("code",[t._v('"string"')]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("typeof null")]),t._v(" 会返回 "),a("code",[t._v('"object"')]),t._v(" —— 这是 JavaScript 编程语言的一个错误，实际上它并不是一个 "),a("code",[t._v("object")]),t._v("。")])]),t._v(" "),a("p",[t._v("在接下来的章节中，我们将重点介绍原始类型值，当你掌握了原始数据类型后，我们将继续学习 "),a("code",[t._v("object")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务"}},[t._v("#")]),t._v(" 任务")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.javascript.info/types#tasks",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zh.javascript.info/types#tasks"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"字符串的引号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的引号"}},[t._v("#")]),t._v(" 字符串的引号")]),t._v(" "),a("p",[t._v("下面的脚本会输出什么？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ilya"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?")]),t._v("\n")])])]),a("p",[t._v("反引号将包装在 "),a("code",[t._v("${...}")]),t._v(" 中的表达式嵌入到了字符串。")]),t._v(" "),a("div",{staticClass:"language-js run extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ilya"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表达式为数字 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 表达式是一个字符串 "name"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello name")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表达式是一个变量，嵌入进去了。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hello ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello Ilya")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);