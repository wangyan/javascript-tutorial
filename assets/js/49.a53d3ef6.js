(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{469:function(t,s,a){"use strict";a.r(s);var n=a(29),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"对象-原始值转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-原始值转换"}},[t._v("#")]),t._v(" 对象 — 原始值转换")]),t._v(" "),a("p",[t._v("当对象相加 "),a("code",[t._v("obj1 + obj2")]),t._v("，相减 "),a("code",[t._v("obj1 - obj2")]),t._v("，或者使用 "),a("code",[t._v("alert(obj)")]),t._v(" 打印时会发生什么？")]),t._v(" "),a("p",[t._v("在这种情况下，对象会被自动转换为原始值，然后执行操作。")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"/type-conversions"}},[t._v("类型转换")]),t._v(" 一章中，我们已经看到了数值，字符串和布尔转换的规则。但是我们没有讲对象的转换规则。现在我们已经掌握了方法（method）和 symbol 的相关知识，可以开始学习对象原始值转换了。")]),t._v(" "),a("ol",[a("li",[t._v("所有的对象在布尔上下文（context）中均为 "),a("code",[t._v("true")]),t._v("。所以对于对象，不存在 to-boolean 转换，只有字符串和数值转换。")]),t._v(" "),a("li",[t._v("数值转换发生在对象相减或应用数学函数时。例如，"),a("code",[t._v("Date")]),t._v(" 对象（将在 "),a("a",{attrs:{href:"date"}},[t._v("日期和时间")]),t._v(" 一章中介绍）可以相减，"),a("code",[t._v("date1 - date2")]),t._v(" 的结果是两个日期之间的差值。")]),t._v(" "),a("li",[t._v("至于字符串转换 —— 通常发生在我们像 "),a("code",[t._v("alert(obj)")]),t._v(" 这样输出一个对象和类似的上下文中。")])]),t._v(" "),a("h2",{attrs:{id:"toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive"}},[t._v("#")]),t._v(" ToPrimitive")]),t._v(" "),a("p",[t._v("我们可以使用特殊的对象方法，对字符串和数值转换进行微调。")]),t._v(" "),a("p",[t._v('下面是三个类型转换的变体，被称为 "hint"，在 '),a("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("规范"),a("OutboundLink")],1),t._v(" 中有详细介绍（译注：当一个对象被用在需要原始值的上下文中时，例如，在 "),a("code",[t._v("alert")]),t._v(" 或数学运算中，对象会被转换为原始值）：")]),t._v(" "),a("p",[a("code",[t._v('"string"')]),t._v(': 对象到字符串的转换，当我们对期望一个字符串的对象执行操作时，如 "alert"：')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将对象作为属性键")]),t._v("\nanotherObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v('"number"')]),t._v(": 对象到数字的转换，例如当我们进行数学运算时：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数学运算（除了二元加法）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一元加法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" delta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" date1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" date2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 小于/大于的比较")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greater "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" user2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v('"default"')]),t._v(": 在少数情况下发生，当运算符“不确定”期望值的类型时。")]),t._v(" "),a("p",[t._v("例如，二元加法 "),a("code",[t._v("+")]),t._v(" 可用于字符串（连接），也可以用于数字（相加），所以字符串和数字这两种类型都可以。因此，当二元加法得到对象类型的参数时，它将依据 "),a("code",[t._v('"default"')]),t._v(" hint 来对其进行转换。")]),t._v(" "),a("p",[t._v("此外，如果对象被用于与字符串、数字或 symbol 进行 "),a("code",[t._v("==")]),t._v(" 比较，这时到底应该进行哪种转换也不是很明确，因此使用 "),a("code",[t._v('"default"')]),t._v(" hint。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二元加法使用默认 hint")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj == number 使用默认 hint")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("像 "),a("code",[t._v("<")]),t._v(" 和 "),a("code",[t._v(">")]),t._v(' 这样的小于/大于比较运算符，也可以同时用于字符串和数字。不过，它们使用 "number" hint，而不是 "default"。这是历史原因。')]),t._v(" "),a("p",[t._v("实际上，我们没有必要记住这些奇特的细节，除了一种情况（"),a("code",[t._v("Date")]),t._v(" 对象，我们稍后会学到它）之外，所有内建对象都以和 "),a("code",[t._v('"number"')]),t._v(" 相同的方式实现 "),a("code",[t._v('"default"')]),t._v(" 转换。我们也可以这样做。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v('没有 "boolean" hint')]),t._v(" "),a("p",[t._v("请注意 —— 只有三种 hint。就这么简单。")]),t._v(" "),a("p",[t._v('没有 "boolean" hint（在布尔上下文中所有对象都是 '),a("code",[t._v("true")]),t._v("）或其他任何东西。如果我们将 "),a("code",[t._v('"default"')]),t._v(" 和 "),a("code",[t._v('"number"')]),t._v(" 视为相同，就像大多数内建函数一样，那么就只有两种转换了。")])]),t._v(" "),a("p",[a("strong",[t._v("为了进行转换，JavaScript 尝试查找并调用三个对象方法：")])]),t._v(" "),a("ol",[a("li",[t._v("调用 "),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v(" —— 带有 symbol 键 "),a("code",[t._v("Symbol.toPrimitive")]),t._v("（系统 symbol）的方法，如果这个方法存在的话，")]),t._v(" "),a("li",[t._v("否则，如果 hint 是 "),a("code",[t._v('"string"')]),t._v("\n—— 尝试 "),a("code",[t._v("obj.toString()")]),t._v(" 和 "),a("code",[t._v("obj.valueOf()")]),t._v("，无论哪个存在。")]),t._v(" "),a("li",[t._v("否则，如果 hint 是 "),a("code",[t._v('"number"')]),t._v(" 或 "),a("code",[t._v('"default"')]),t._v("\n—— 尝试 "),a("code",[t._v("obj.valueOf()")]),t._v(" 和 "),a("code",[t._v("obj.toString()")]),t._v("，无论哪个存在。")])]),t._v(" "),a("h2",{attrs:{id:"symbol-toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[t._v("#")]),t._v(" Symbol.toPrimitive")]),t._v(" "),a("p",[t._v("我们从第一个方法开始。有一个名为 "),a("code",[t._v("Symbol.toPrimitive")]),t._v(" 的内建 symbol，它被用来给转换方法命名，像这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个原始值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// hint = "string"、"number" 和 "default" 中的一个')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("例如，这里 "),a("code",[t._v("user")]),t._v(" 对象实现了它：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  money"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("hint: ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hint"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hint "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('{name: "')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换演示：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// hint: string -> {name: "John"}')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hint: number -> 1000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hint: default -> 1500")]),t._v("\n")])])]),a("p",[t._v("从代码中我们可以看到，根据转换的不同，"),a("code",[t._v("user")]),t._v(" 变成一个自描述字符串或者一个金额。单个方法 "),a("code",[t._v("user[Symbol.toPrimitive]")]),t._v(" 处理了所有的转换情况。")]),t._v(" "),a("h2",{attrs:{id:"tostring-valueof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring-valueof"}},[t._v("#")]),t._v(" toString/valueOf")]),t._v(" "),a("p",[t._v("方法 "),a("code",[t._v("toString")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v(" 来自上古时代。它们不是 symbol（那时候还没有 symbol 这个概念），而是“常规的”字符串命名的方法。它们提供了一种可选的“老派”的实现转换的方法。")]),t._v(" "),a("p",[t._v("如果没有 "),a("code",[t._v("Symbol.toPrimitive")]),t._v("，那么 JavaScript 将尝试找到它们，并且按照下面的顺序进行尝试：")]),t._v(" "),a("ul",[a("li",[t._v('对于 "string" hint，'),a("code",[t._v("toString -> valueOf")]),t._v("。")]),t._v(" "),a("li",[t._v("其他情况，"),a("code",[t._v("valueOf -> toString")]),t._v("。")])]),t._v(" "),a("p",[t._v("这些方法必须返回一个原始值。如果 "),a("code",[t._v("toString")]),t._v(" 或 "),a("code",[t._v("valueOf")]),t._v(" 返回了一个对象，那么返回值会被忽略（和这里没有方法的时候相同）。")]),t._v(" "),a("p",[t._v("默认情况下，普通对象具有 "),a("code",[t._v("toString")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v(" 方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("toString")]),t._v(" 方法返回一个字符串 "),a("code",[t._v('"[object Object]"')]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("valueOf")]),t._v(" 方法返回对象自身。")])]),t._v(" "),a("p",[t._v("下面是一个示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("所以，如果我们尝试将一个对象当做字符串来使用，例如在 "),a("code",[t._v("alert")]),t._v(" 中，那么在默认情况下我们会看到 "),a("code",[t._v("[object Object]")]),t._v("。")]),t._v(" "),a("p",[t._v("这里提到默认值 "),a("code",[t._v("valueOf")]),t._v(" 只是为了完整起见，以避免混淆。正如你看到的，它返回对象本身，因此被忽略。别问我为什么，那是历史原因。所以我们可以假设它根本就不存在。")]),t._v(" "),a("p",[t._v("让我们实现一下这些方法。")]),t._v(" "),a("p",[t._v("例如，这里的 "),a("code",[t._v("user")]),t._v(" 执行和前面提到的那个 "),a("code",[t._v("user")]),t._v(" 一样的操作，使用 "),a("code",[t._v("toString")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v(" 的组合（而不是 "),a("code",[t._v("Symbol.toPrimitive")]),t._v("）：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  money"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 对于 hint="string"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('{name: "')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 对于 hint="number" 或 "default"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// toString -> {name: "John"}')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// valueOf -> 1000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// valueOf -> 1500")]),t._v("\n")])])]),a("p",[t._v("我们可以看到，执行的动作和前面使用 "),a("code",[t._v("Symbol.toPrimitive")]),t._v(" 的那个例子相同。")]),t._v(" "),a("p",[t._v("通常我们希望有一个“全能”的地方来处理所有原始转换。在这种情况下，我们可以只实现 "),a("code",[t._v("toString")]),t._v("，就像这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString -> John")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString -> John500")]),t._v("\n")])])]),a("p",[t._v("如果没有 "),a("code",[t._v("Symbol.toPrimitive")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v("，"),a("code",[t._v("toString")]),t._v(" 将处理所有原始转换。")]),t._v(" "),a("h2",{attrs:{id:"返回类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回类型"}},[t._v("#")]),t._v(" 返回类型")]),t._v(" "),a("p",[t._v('关于所有原始转换方法，有一个重要的点需要知道，就是它们不一定会返回 "hint" 的原始值。')]),t._v(" "),a("p",[t._v("没有限制 "),a("code",[t._v("toString()")]),t._v(" 是否返回字符串，或 "),a("code",[t._v("Symbol.toPrimitive")]),t._v(' 方法是否为 hint "number" 返回数字。')]),t._v(" "),a("p",[t._v("唯一强制性的事情是：这些方法必须返回一个原始值，而不是对象。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("历史原因")]),t._v(" "),a("p",[t._v("由于历史原因，如果 "),a("code",[t._v("toString")]),t._v(" 或 "),a("code",[t._v("valueOf")]),t._v(' 返回一个对象，则不会出现 error，但是这种值会被忽略（就像这种方法根本不存在）。这是因为在 JavaScript 语言发展初期，没有很好的 "error" 的概念。')]),t._v(" "),a("p",[t._v("相反，"),a("code",[t._v("Symbol.toPrimitive")]),t._v(" "),a("strong",[t._v("必须")]),t._v(" 返回一个原始值，否则就会出现 error。")])]),t._v(" "),a("h2",{attrs:{id:"进一步的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步的转换"}},[t._v("#")]),t._v(" 进一步的转换")]),t._v(" "),a("p",[t._v("我们已经知道，许多运算符和函数执行类型转换，例如乘法 "),a("code",[t._v("*")]),t._v(" 将操作数转换为数字。")]),t._v(" "),a("p",[t._v("如果我们将对象作为参数传递，则会出现两个阶段：")]),t._v(" "),a("ol",[a("li",[t._v("对象被转换为原始值（通过前面我们描述的规则）。")]),t._v(" "),a("li",[t._v("如果生成的原始值的类型不正确，则继续进行转换。")])]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString 在没有其他方法的情况下处理所有转换")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 4，对象被转换为原始值字符串 "2"，之后它被乘法转换为数字 2。')]),t._v("\n")])])]),a("ol",[a("li",[t._v("乘法 "),a("code",[t._v("obj * 2")]),t._v(' 首先将对象转换为原始值（字符串 "2"）。')]),t._v(" "),a("li",[t._v("之后 "),a("code",[t._v('"2" * 2')]),t._v(" 变为 "),a("code",[t._v("2 * 2")]),t._v("（字符串被转换为数字）。")])]),t._v(" "),a("p",[t._v("二元加法在同样的情况下会将其连接成字符串，因为它更愿意接受字符串：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 22（"2" + 2）被转换为原始值字符串 => 级联')]),t._v("\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("对象到原始值的转换，是由许多期望以原始值作为值的内建函数和运算符自动调用的。")]),t._v(" "),a("p",[t._v("这里有三种类型（hint）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v('"string"')]),t._v("（对于 "),a("code",[t._v("alert")]),t._v(" 和其他需要字符串的操作）")]),t._v(" "),a("li",[a("code",[t._v('"number"')]),t._v("（对于数学运算）")]),t._v(" "),a("li",[a("code",[t._v('"default"')]),t._v("（少数运算符）")])]),t._v(" "),a("p",[t._v("规范明确描述了哪个运算符使用哪个 hint。很少有运算符“不知道期望什么”并使用 "),a("code",[t._v('"default"')]),t._v(" hint。通常对于内建对象，"),a("code",[t._v('"default"')]),t._v(" hint 的处理方式与 "),a("code",[t._v('"number"')]),t._v(" 相同，因此在实践中，最后两个 hint 常常合并在一起。")]),t._v(" "),a("p",[t._v("转换算法是：")]),t._v(" "),a("ol",[a("li",[t._v("调用 "),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v(" 如果这个方法存在，")]),t._v(" "),a("li",[t._v("否则，如果 hint 是 "),a("code",[t._v('"string"')]),t._v(" "),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.toString()")]),t._v(" 和 "),a("code",[t._v("obj.valueOf()")]),t._v("，无论哪个存在。")])])]),t._v(" "),a("li",[t._v("否则，如果 hint 是 "),a("code",[t._v('"number"')]),t._v(" 或者 "),a("code",[t._v('"default"')]),t._v(" "),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.valueOf()")]),t._v(" 和 "),a("code",[t._v("obj.toString()")]),t._v("，无论哪个存在。")])])])]),t._v(" "),a("p",[t._v("在实践中，为了便于进行日志记录或调试，对于所有能够返回一种“可读性好”的对象的表达形式的转换，只实现以 "),a("code",[t._v("obj.toString()")]),t._v(" 作为全能转换的方法就够了。")])])}),[],!1,null,null,null);s.default=e.exports}}]);