(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{444:function(s,t,a){"use strict";a.r(t);var e=a(29),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"值的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值的比较"}},[s._v("#")]),s._v(" 值的比较")]),s._v(" "),a("p",[s._v("我们知道，在数学中有很多用于比较大小的运算符。")]),s._v(" "),a("p",[s._v("在 JavaScript 中，它们的编写方式如下：")]),s._v(" "),a("ul",[a("li",[s._v("大于 / 小于："),a("code",[s._v("a > b")]),s._v("，"),a("code",[s._v("a < b")]),s._v("。")]),s._v(" "),a("li",[s._v("大于等于 / 小于等于："),a("code",[s._v("a >= b")]),s._v("，"),a("code",[s._v("a <= b")]),s._v("。")]),s._v(" "),a("li",[s._v("检查两个值的相等："),a("code",[s._v("a == b")]),s._v("，请注意双等号 "),a("code",[s._v("==")]),s._v(" 表示相等性检查，而单等号 "),a("code",[s._v("a = b")]),s._v(" 表示赋值。")]),s._v(" "),a("li",[s._v("检查两个值不相等。不相等在数学中的符号是 "),a("code",[s._v("≠")]),s._v("，但在 JavaScript 中写成 "),a("code",[s._v("a != b")]),s._v("。")])]),s._v(" "),a("p",[s._v("在本文中，我们将进一步了解不同类型的比较，JavaScript 是如何进行比较的，包括一些重要的特殊性。")]),s._v(" "),a("p",[s._v("在文末给出了一些秘诀，帮助你避免“javascript 陷阱”相关的问题。")]),s._v(" "),a("h2",{attrs:{id:"比较结果为-boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较结果为-boolean-类型"}},[s._v("#")]),s._v(" 比较结果为 Boolean 类型")]),s._v(" "),a("p",[s._v("所有比较运算符均返回布尔值：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("true")]),s._v(" —— 表示“yes（是）”，“correct（正确）”或“the truth（真）”。")]),s._v(" "),a("li",[a("code",[s._v("false")]),s._v(" ——  表示“no（否）”，“wrong（错误）”或“not the truth（非真）”。")])]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true（正确）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false（错误）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true（正确）")]),s._v("\n")])])]),a("p",[s._v("和其他类型的值一样，比较的结果可以被赋值给任意变量：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把比较的结果赋值给 result")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("h2",{attrs:{id:"字符串比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串比较"}},[s._v("#")]),s._v(" 字符串比较")]),s._v(" "),a("p",[s._v("在比较字符串的大小时，JavaScript 会使用“字典（dictionary）”或“词典（lexicographical）”顺序进行判定。")]),s._v(" "),a("p",[s._v("换言之，字符串是按字符（母）逐个进行比较的。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Z'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Glow'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Glee'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Bee'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Be'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("p",[s._v("字符串的比较算法非常简单：")]),s._v(" "),a("ol",[a("li",[s._v("首先比较两个字符串的首位字符大小。")]),s._v(" "),a("li",[s._v("如果一方字符较大（或较小），则该字符串大于（或小于）另一个字符串。算法结束。")]),s._v(" "),a("li",[s._v("否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较。")]),s._v(" "),a("li",[s._v("重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。")]),s._v(" "),a("li",[s._v("如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。")])]),s._v(" "),a("p",[s._v("在上面的例子中，"),a("code",[s._v("'Z' > 'A'")]),s._v(" 在算法的第 1 步就得到了返回结果，而字符串 "),a("code",[s._v("Glow")]),s._v(" 与 "),a("code",[s._v("Glee")]),s._v(" 则继续逐个字符比较：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("G")]),s._v(" 和 "),a("code",[s._v("G")]),s._v(" 相等。")]),s._v(" "),a("li",[a("code",[s._v("l")]),s._v(" 和 "),a("code",[s._v("l")]),s._v(" 相等。")]),s._v(" "),a("li",[a("code",[s._v("o")]),s._v(" 比 "),a("code",[s._v("e")]),s._v(" 大，算法停止，第一个字符串大于第二个。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("非真正的字典顺序，而是 Unicode 编码顺序")]),s._v(" "),a("p",[s._v("在上面的算法中，比较大小的逻辑与字典或电话簿中的排序很像，但也不完全相同。")]),s._v(" "),a("p",[s._v("比如说，字符串比较对字母大小写是敏感的。大写的 "),a("code",[s._v('"A"')]),s._v(" 并不等于小写的 "),a("code",[s._v('"a"')]),s._v("。哪一个更大呢？实际上小写的 "),a("code",[s._v('"a"')]),s._v(" 更大。这是因为在 JavaScript 使用的内部编码表中（Unicode），小写字母的字符索引值更大。我们会在 "),a("a",{attrs:{href:"/string"}},[s._v("字符串")]),s._v(" 这章讨论更多关于字符串的细节。")])]),s._v(" "),a("h2",{attrs:{id:"不同类型间的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同类型间的比较"}},[s._v("#")]),s._v(" 不同类型间的比较")]),s._v(" "),a("p",[s._v("当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，字符串 '2' 会被转化为数字 2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'01'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true，字符串 '01' 会被转化为数字 1")]),s._v("\n")])])]),a("p",[s._v("对于布尔类型值，"),a("code",[s._v("true")]),s._v(" 会被转化为 "),a("code",[s._v("1")]),s._v("、"),a("code",[s._v("false")]),s._v(" 转化为 "),a("code",[s._v("0")]),s._v("。")]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("一个有趣的现象")]),s._v(" "),a("p",[s._v("有时候，以下两种情况会同时发生：")]),s._v(" "),a("ul",[a("li",[s._v("若直接比较两个值，其结果是相等的。")]),s._v(" "),a("li",[s._v("若把两个值转为布尔值，它们可能得出完全相反的结果，即一个是 "),a("code",[s._v("true")]),s._v("，一个是 "),a("code",[s._v("false")]),s._v("。")])]),s._v(" "),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true!")]),s._v("\n")])])]),a("p",[s._v("对于 JavaScript 而言，这种现象其实挺正常的。因为 JavaScript 会把待比较的值转化为数字后再做比较（因此 "),a("code",[s._v('"0"')]),s._v(" 变成了 "),a("code",[s._v("0")]),s._v("）。若只是将一个变量转化为 "),a("code",[s._v("Boolean")]),s._v(" 值，则会使用其他的类型转换规则。")])]),s._v(" "),a("h2",{attrs:{id:"严格相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#严格相等"}},[s._v("#")]),s._v(" 严格相等")]),s._v(" "),a("p",[s._v("普通的相等性检查 "),a("code",[s._v("==")]),s._v(" 存在一个问题，它不能区分出 "),a("code",[s._v("0")]),s._v(" 和 "),a("code",[s._v("false")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("p",[s._v("也同样无法区分空字符串和 "),a("code",[s._v("false")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("p",[s._v("这是因为在比较不同类型的值时，处于相等判断符号 "),a("code",[s._v("==")]),s._v(" 两侧的值会先被转化为数字。空字符串和 "),a("code",[s._v("false")]),s._v(" 也是如此，转化后它们都为数字 0。")]),s._v(" "),a("p",[s._v("如果我们需要区分 "),a("code",[s._v("0")]),s._v(" 和 "),a("code",[s._v("false")]),s._v("，该怎么办？")]),s._v(" "),a("p",[a("strong",[s._v("严格相等运算符 "),a("code",[s._v("===")]),s._v(" 在进行比较时不会做任何的类型转换。")])]),s._v(" "),a("p",[s._v("换句话说，如果 "),a("code",[s._v("a")]),s._v(" 和 "),a("code",[s._v("b")]),s._v(" 属于不同的数据类型，那么 "),a("code",[s._v("a === b")]),s._v(" 不会做任何的类型转换而立刻返回 "),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("p",[s._v("让我们试试：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，因为被比较值的数据类型不同")]),s._v("\n")])])]),a("p",[s._v("同样的，与“不相等”符号 "),a("code",[s._v("!=")]),s._v(" 类似，“严格不相等”表示为 "),a("code",[s._v("!==")]),s._v("。")]),s._v(" "),a("p",[s._v("严格相等的运算符虽然写起来稍微长一些，但是它能够很清楚地显示代码意图，降低你犯错的可能性。")]),s._v(" "),a("h2",{attrs:{id:"对-null-和-undefined-进行比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-null-和-undefined-进行比较"}},[s._v("#")]),s._v(" 对 null 和 undefined 进行比较")]),s._v(" "),a("p",[s._v("当使用 "),a("code",[s._v("null")]),s._v(" 或 "),a("code",[s._v("undefined")]),s._v(" 与其他值进行比较时，其返回结果常常出乎你的意料。")]),s._v(" "),a("p",[s._v("当使用严格相等 "),a("code",[s._v("===")]),s._v(" 比较二者时\n: 它们不相等，因为它们属于不同的类型。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])])]),a("p",[s._v("当使用非严格相等 "),a("code",[s._v("==")]),s._v(" 比较二者时\n: JavaScript 存在一个特殊的规则，会判定它们相等。它们俩就像“一对恋人”，仅仅等于对方而不等于其他任何的值（只在非严格相等下成立）。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])])]),a("p",[s._v("当使用数学式或其他比较方法 "),a("code",[s._v("< > <= >=")]),s._v(" 时：\n: "),a("code",[s._v("null/undefined")]),s._v(" 会被转化为数字："),a("code",[s._v("null")]),s._v(" 被转化为 "),a("code",[s._v("0")]),s._v("，"),a("code",[s._v("undefined")]),s._v(" 被转化为 "),a("code",[s._v("NaN")]),s._v("。")]),s._v(" "),a("p",[s._v("下面让我们看看，这些规则会带来什么有趣的现象。同时更重要的是，我们需要从中学会如何远离这些特性带来的“陷阱”。")]),s._v(" "),a("h3",{attrs:{id:"奇怪的结果-null-vs-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#奇怪的结果-null-vs-0"}},[s._v("#")]),s._v(" 奇怪的结果：null vs 0")]),s._v(" "),a("p",[s._v("通过比较 "),a("code",[s._v("null")]),s._v(" 和 0 可得：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[s._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (1) false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (2) false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (3) true")]),s._v("\n")])])]),a("p",[s._v("是的，上面的结果完全打破了你对数学的认识。在最后一行代码显示“"),a("code",[s._v("null")]),s._v(" 大于等于 0”的情况下，前两行代码中一定会有一个是正确的，然而事实表明它们的结果都是 false。")]),s._v(" "),a("p",[s._v("为什么会出现这种反常结果，这是因为相等性检查 "),a("code",[s._v("==")]),s._v(" 和普通比较符 "),a("code",[s._v("> < >= <=")]),s._v(" 的代码逻辑是相互独立的。进行值的比较时，"),a("code",[s._v("null")]),s._v(" 会被转化为数字，因此它被转化为了 "),a("code",[s._v("0")]),s._v("。这就是为什么（3）中 "),a("code",[s._v("null >= 0")]),s._v(" 返回值是 true，（1）中 "),a("code",[s._v("null > 0")]),s._v(" 返回值是 false。")]),s._v(" "),a("p",[s._v("另一方面，"),a("code",[s._v("undefined")]),s._v(" 和 "),a("code",[s._v("null")]),s._v(" 在相等性检查 "),a("code",[s._v("==")]),s._v(" 中不会进行任何的类型转换，它们有自己独立的比较规则，所以除了它们之间互等外，不会等于任何其他的值。这就解释了为什么（2）中 "),a("code",[s._v("null == 0")]),s._v(" 会返回 false。")]),s._v(" "),a("h3",{attrs:{id:"特立独行的-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特立独行的-undefined"}},[s._v("#")]),s._v(" 特立独行的 undefined")]),s._v(" "),a("p",[a("code",[s._v("undefined")]),s._v(" 不应该被与其他值进行比较：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false (1)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false (2)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false (3)")]),s._v("\n")])])]),a("p",[s._v("为何它看起来如此厌恶 0？返回值都是 false！")]),s._v(" "),a("p",[s._v("原因如下：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("(1)")]),s._v(" 和 "),a("code",[s._v("(2)")]),s._v(" 都返回 "),a("code",[s._v("false")]),s._v(" 是因为 "),a("code",[s._v("undefined")]),s._v(" 在比较中被转换为了 "),a("code",[s._v("NaN")]),s._v("，而 "),a("code",[s._v("NaN")]),s._v(" 是一个特殊的数值型值，它与任何值进行比较都会返回 "),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("(3)")]),s._v(" 返回 "),a("code",[s._v("false")]),s._v(" 是因为这是一个相等性检查，而 "),a("code",[s._v("undefined")]),s._v(" 只与 "),a("code",[s._v("null")]),s._v(" 相等，不会与其他值相等。")])]),s._v(" "),a("h3",{attrs:{id:"避免问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#避免问题"}},[s._v("#")]),s._v(" 避免问题")]),s._v(" "),a("p",[s._v("我们为何要研究上述示例？我们需要时刻记得这些古怪的规则吗？不，其实不需要。虽然随着代码写得越来越多，我们对这些规则也都会烂熟于胸，但是我们需要更为可靠的方法来避免潜在的问题：")]),s._v(" "),a("ul",[a("li",[s._v("除了严格相等 "),a("code",[s._v("===")]),s._v(" 外，其他但凡是有 "),a("code",[s._v("undefined/null")]),s._v(" 参与的比较，我们都需要格外小心。")]),s._v(" "),a("li",[s._v("除非你非常清楚自己在做什么，否则永远不要使用 "),a("code",[s._v(">= > < <=")]),s._v(" 去比较一个可能为 "),a("code",[s._v("null/undefined")]),s._v(" 的变量。对于取值可能是 "),a("code",[s._v("null/undefined")]),s._v(" 的变量，请按需要分别检查它的取值情况。")])]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("ul",[a("li",[s._v("比较运算符始终返回布尔值。")]),s._v(" "),a("li",[s._v("字符串的比较，会按照“词典”顺序逐字符地比较大小。")]),s._v(" "),a("li",[s._v("当对不同类型的值进行比较时，它们会先被转化为数字（不包括严格相等检查）再进行比较。")]),s._v(" "),a("li",[s._v("在非严格相等 "),a("code",[s._v("==")]),s._v(" 下，"),a("code",[s._v("null")]),s._v(" 和 "),a("code",[s._v("undefined")]),s._v(" 相等且各自不等于任何其他的值。")]),s._v(" "),a("li",[s._v("在使用 "),a("code",[s._v(">")]),s._v(" 或 "),a("code",[s._v("<")]),s._v(" 进行比较时，需要注意变量可能为 "),a("code",[s._v("null/undefined")]),s._v(" 的情况。比较好的方法是单独检查变量是否等于 "),a("code",[s._v("null/undefined")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务"}},[s._v("#")]),s._v(" 任务")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://zh.javascript.info/comparison#tasks",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://zh.javascript.info/comparison#tasks"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"值的比较-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#值的比较-2"}},[s._v("#")]),s._v(" 值的比较")]),s._v(" "),a("p",[s._v("以下表达式的执行结果是？")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pineapple"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n0\\n"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n0\\n"')]),s._v("\n")])])]),a("p",[s._v("答案如下：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pineapple"')]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12"')]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n0\\n"')]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n0\\n"')]),s._v(" → "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])])]),a("p",[s._v("结果的原因：")]),s._v(" "),a("ol",[a("li",[s._v("数字间比较大小，显然得 true。")]),s._v(" "),a("li",[s._v("按词典顺序比较，得 false。"),a("code",[s._v('"a"')]),s._v(" 比 "),a("code",[s._v('"p"')]),s._v(" 小。")]),s._v(" "),a("li",[s._v("与第 2 题同理，首位字符 "),a("code",[s._v('"2"')]),s._v(" 大于 "),a("code",[s._v('"1"')]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("null")]),s._v(" 只与 "),a("code",[s._v("undefined")]),s._v(" 互等。")]),s._v(" "),a("li",[s._v("严格相等模式下，类型不同得 false。")]),s._v(" "),a("li",[s._v("与第 4 题同理，"),a("code",[s._v("null")]),s._v(" 只与 "),a("code",[s._v("undefined")]),s._v(" 相等。")]),s._v(" "),a("li",[s._v("不同类型严格不相等。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);